name: CI
on:
  push:
    branches: [main]
  pull_request:

jobs:
  lint:
    name: Run Ruff Linter
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff
        run: ruff check --output-format=github .

  test:
    name: Run Unit Tests
    needs: lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install pytest pytest-cov

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Run tests with Pytest
        run: |
          pytest --verbose --cov=src --cov-report=xml -W ignore::DeprecationWarning tests/

      - name: Upload coverage report to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  build-docker-image:
    name: Build & Push Docker Image
    needs: test
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/my-flask-app:latest

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/my-flask-app:latest
          format: table
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

  deploy-on-k3d:
    name: Deploy on K3d
    needs: build-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          k3d cluster create cluster-test --wait

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "v1.32.2"

      - name: Create GHCR image pull secret
        run: |
          kubectl create secret docker-registry ghcr-creds \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }}

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f kube_config/
          kubectl rollout status deployment my-flask-app --timeout=60s

      - name: Install Kubescape
        run: |
          curl -LO https://github.com/kubescape/kubescape/releases/latest/download/kubescape-linux-amd64
          mv kubescape-linux-amd64 kubescape
          chmod +x kubescape
          sudo mv kubescape /usr/local/bin/

      - name: Scan live K3d cluster with Kubescape
        run: |
          kubescape scan framework mitre --submit=false --format pretty --use-kubescape-v2

      - name: Wait and test readyz endpoint
        run: |
          kubectl port-forward svc/my-flask-app-service 8888:8888 &
          sleep 5
          curl -f http://localhost:8888/readyz

      - name: Cleanup k3d cluster
        if: always()
        run: k3d cluster delete cluster-test
